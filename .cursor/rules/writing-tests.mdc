---
description: Write unit or integration tests
globs:
alwaysApply: false
---
# Guidelines for Writing Tests

## General Testing Principles

### Project Testing Structure
- `tests/unit/`: For isolated component tests.
- `tests/integration/`: For tests that verify multiple components working together.
- Test files should follow the pattern `test_*.py`.

### Pytest Usage
- Use pytest as the main testing framework.
- Use pytest-asyncio for async test functions.
- Use `@pytest.mark.asyncio` to mark async tests.

### Testing Best Practices
- Test both success and failure conditions.
- Test edge cases and boundaries.
- Keep tests independent and idempotent.
- Include helpful error messages in assertions.
- Write clear, descriptive test names and docstrings.
- Use appropriate timeouts for operations that might block.

### Test Structure
- Use parameterized tests when testing similar scenarios with different inputs.

### Test Coverage
- Aim for high code coverage (>80%).
- Focus on testing edge cases and error conditions.
- Don't just test the happy path.

## Unit Tests

Unit tests in this project:
- Should be placed in the `tests/unit/` directory.
- Should focus on testing a single component or function in isolation.
- Should mock dependencies to isolate the unit under test.
- Should be fast and not depend on external services or databases.

### Unit Test Naming Convention
- Use descriptive names that indicate what's being tested.
- Format: `test_<method_name>_<scenario>_<expected_outcome>`
- Example: `test_calculate_total_with_discount_returns_reduced_price`

## Integration Tests

Integration tests in this project:
- Should be placed in the `tests/integration/` directory.
- Test how multiple components work together.

### MCP Integration Testing
- For testing MCP (Model Context Protocol) features, use the test server in `tests/mcp_server.py`.
- Test error handling and edge cases in MCP interactions.
